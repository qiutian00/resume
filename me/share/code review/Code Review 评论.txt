code review好处： 进行技术交流，加强沟通； 是否对功能需求理解有偏差的； 修改他人的模块的问题，避免有考虑不周到的地方

review 应该是异步的, 不需要强制把大家叫到一起, 盯着大屏幕 review
review 不能光看逻辑, 代码风格, 实现是否优雅也应该是重点 review 范围
明确一点, review 不是给别人挑错, 而是一场技术交流, 差的指出来使人进步, 好的赞美一下向人学习
不一定非要熟悉该业务、模块的人 review, 每个人各有所长, 别人站在不同的视角可能有意想不到的收获 个人想法

初期可以搞一些集体会议, 团队养成习惯后尽量减少, 不然总有种逼人的感觉, 达不到什么好的效果. 更主要还是费时间…

review目标很重要，把握方向是review的难题:
但是实际开发过程中，不太可能有这样的会议，第一点是项目大了之后每个模块细致的方面不是每个成员都清楚，一般是小组 Leader 比较清晰；第二点这种 Review 会议比较耗时，如果改动点较大的话无法从 Review 会议中找出问题。所以我的建议还是从源头把控，从功能需求开始做的时候需要有 Design 会议，同时可以请组内小伙伴来听，最后从了解需求的小伙伴里面挑选 Reviewer。这样 Reviewer 可以根据的 PR 里面的描述，以及对需求的了解作出判断。我们之前的做法一般会将 PR Code 拉取到本地，结合未改动的 Code 给出建议，这样 Review Code 不会成为 Reviewer 的负担，也可以很快的给出回应。